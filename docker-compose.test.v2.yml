services:
  # MongoDB shared by all KATO instances
  mongodb:
    image: mongo:4.4
    container_name: kato-mongodb-v2
    ports:
      - "27017:27017"
    volumes:
      - mongo-data-v2:/data/db
    networks:
      - kato-network-v2
    command: mongod --replSet rs0 --bind_ip_all
    restart: unless-stopped

  # MongoDB replica set initializer
  mongodb-init:
    image: mongo:4.4
    container_name: kato-mongodb-init-v2
    depends_on:
      - mongodb
    networks:
      - kato-network-v2
    command: >
      bash -c "
        for i in {1..30}; do
          if mongo --host mongodb:27017 --eval '
            rs.initiate({
              _id: \"rs0\",
              members: [{_id: 0, host: \"mongodb:27017\"}]
            })
          ' 2>/dev/null; then
            echo 'Replica set initialized successfully'
            break
          fi
          echo 'Waiting for MongoDB to be ready... (attempt \$i/30)'
          sleep 2
        done
      "
    restart: "no"

  # Qdrant vector database (required for vector operations)
  qdrant:
    image: qdrant/qdrant:latest
    container_name: kato-qdrant-v2
    ports:
      - "6333:6333"
    volumes:
      - qdrant-data-v2:/qdrant/storage
    networks:
      - kato-network-v2
    restart: unless-stopped

  # Redis for session management (v2 feature)
  redis:
    image: redis:7-alpine
    container_name: kato-redis-v2
    ports:
      - "6379:6379"
    volumes:
      - redis-data-v2:/data
    networks:
      - kato-network-v2
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Single KATO v2 instance for testing
  kato-test-v2:
    build:
      context: .
      dockerfile: Dockerfile.v2
    image: kato:v2
    container_name: kato-test-v2
    environment:
      - PROCESSOR_ID=test-v2
      - PROCESSOR_NAME=Test-v2
      - MONGO_BASE_URL=mongodb://mongodb:27017/?replicaSet=rs0
      - QDRANT_HOST=qdrant
      - QDRANT_PORT=6333
      - REDIS_URL=redis://redis:6379
      - ENABLE_V2_FEATURES=true
      - MAX_PATTERN_LENGTH=0
      - PERSISTENCE=5
      - RECALL_THRESHOLD=0.1
      - LOG_LEVEL=DEBUG  # Debug for better test diagnostics
    ports:
      - "8001:8000"  # Use 8001 as tests look for this port first
    networks:
      - kato-network-v2
    depends_on:
      redis:
        condition: service_healthy
      mongodb-init:
        condition: service_completed_successfully
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  kato-network-v2:
    driver: bridge

volumes:
  mongo-data-v2:
  qdrant-data-v2:
  redis-data-v2: