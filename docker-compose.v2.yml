version: '3.8'

services:
  # MongoDB shared by all KATO instances
  mongodb:
    image: mongo:4.4
    container_name: kato-mongodb-v2
    ports:
      - "27017:27017"
    volumes:
      - mongo-data-v2:/data/db
    networks:
      - kato-network-v2
    restart: unless-stopped
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongo localhost:27017/test --quiet
      interval: 10s
      timeout: 5s
      retries: 5
    # MongoDB will use write concern in application code

  # Qdrant vector database
  qdrant:
    image: qdrant/qdrant:latest
    container_name: kato-qdrant-v2
    ports:
      - "6333:6333"
    volumes:
      - qdrant-data-v2:/qdrant/storage
    networks:
      - kato-network-v2
    restart: unless-stopped

  # Redis for session storage (new in v2.0)
  redis:
    image: redis:7-alpine
    container_name: kato-redis-v2
    ports:
      - "6379:6379"
    volumes:
      - redis-data-v2:/data
    networks:
      - kato-network-v2
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # KATO v2.0 Primary Instance with Session Support
  kato-primary-v2:
    build:
      context: .
      dockerfile: Dockerfile.v2
    image: kato:v2
    container_name: kato-primary-v2
    environment:
      - PROCESSOR_ID=primary-v2
      - PROCESSOR_NAME=Primary-v2
      - MONGO_BASE_URL=mongodb://mongodb:27017
      - QDRANT_HOST=qdrant
      - QDRANT_PORT=6333
      - REDIS_URL=redis://redis:6379
      - MAX_PATTERN_LENGTH=0
      - PERSISTENCE=5
      - RECALL_THRESHOLD=0.1
      - LOG_LEVEL=INFO
      - SESSION_TTL=3600
      - ENABLE_V2_FEATURES=true
    ports:
      - "8001:8000"
    networks:
      - kato-network-v2
    depends_on:
      - mongodb
      - qdrant
      - redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8000/v2/health', timeout=5).read()"]
      interval: 30s
      timeout: 10s
      retries: 3

  # KATO v2.0 Testing Instance (for isolated testing)
  kato-testing-v2:
    build:
      context: .
      dockerfile: Dockerfile.v2
    image: kato:v2
    container_name: kato-testing-v2
    environment:
      - PROCESSOR_ID=testing-v2
      - PROCESSOR_NAME=Testing-v2
      - MONGO_BASE_URL=mongodb://mongodb:27017
      - QDRANT_HOST=qdrant
      - QDRANT_PORT=6333
      - REDIS_URL=redis://redis:6379
      - MAX_PATTERN_LENGTH=10
      - PERSISTENCE=5
      - RECALL_THRESHOLD=0.1
      - LOG_LEVEL=DEBUG
      - SESSION_TTL=1800
      - ENABLE_V2_FEATURES=true
    ports:
      - "8002:8000"
    networks:
      - kato-network-v2
    depends_on:
      - mongodb
      - qdrant
      - redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8000/v2/health', timeout=5).read()"]
      interval: 30s
      timeout: 10s
      retries: 3

  # KATO v2.0 Analytics Instance (auto-learning enabled)
  kato-analytics-v2:
    build:
      context: .
      dockerfile: Dockerfile.v2
    image: kato:v2
    container_name: kato-analytics-v2
    environment:
      - PROCESSOR_ID=analytics-v2
      - PROCESSOR_NAME=Analytics-v2
      - MONGO_BASE_URL=mongodb://mongodb:27017
      - QDRANT_HOST=qdrant
      - QDRANT_PORT=6333
      - REDIS_URL=redis://redis:6379
      - MAX_PATTERN_LENGTH=50
      - PERSISTENCE=10
      - RECALL_THRESHOLD=0.5
      - LOG_LEVEL=INFO
      - SESSION_TTL=7200
      - ENABLE_V2_FEATURES=true
    ports:
      - "8003:8000"
    networks:
      - kato-network-v2
    depends_on:
      - mongodb
      - qdrant
      - redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8000/v2/health', timeout=5).read()"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  kato-network-v2:
    driver: bridge

volumes:
  mongo-data-v2:
  qdrant-data-v2:
  redis-data-v2: